-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.countries
(
    country_id character(2) NOT NULL,
    country_name character varying(100) NOT NULL,
    PRIMARY KEY (country_id)
);

CREATE TABLE IF NOT EXISTS public.states
(
    state_id character varying(20) NOT NULL,
    region_name character varying(50) NOT NULL,
    country_id character(2),
    PRIMARY KEY (state_id)
);

COMMENT ON TABLE public.states
    IS 'States, regions etc. in a specific country.';

CREATE TABLE IF NOT EXISTS public.datasets
(
    dataset_id character varying(50),
    dataset_name character varying(200) NOT NULL,
    dataset_state_id character varying(20) NOT NULL,
    dataset_frequency_id character varying(20) NOT NULL,
    dataset_source_id character varying(50) NOT NULL,
    dataset_automation_file character varying(500) DEFAULT 'No File found',
    dataset_instruction character varying(500) DEFAULT 'No File found',
    PRIMARY KEY (dataset_id)
);

COMMENT ON TABLE public.datasets
    IS 'The data is splited into a qroup called dataset, wchich means that the data is more or less has the same subject, country or region frequency etc.';

COMMENT ON COLUMN public.datasets.dataset_state_id
    IS 'Can differ from the region in series. For example region World for dataset, but region US for specific series.';

COMMENT ON COLUMN public.datasets.dataset_frequency_id
    IS 'The frequency of data published by the source';

CREATE TABLE IF NOT EXISTS public.sources
(
    source_id character varying(20),
    source_name character varying(100) NOT NULL,
    source_link character varying(500) DEFAULT 'No Link available',
    PRIMARY KEY (source_id)
);

COMMENT ON TABLE public.sources
    IS 'The origin of the data| The official primary publisher of the data';

CREATE TABLE IF NOT EXISTS public.frequencies
(
    frequency_id character varying(20),
    frequency_name character varying(20) NOT NULL,
    PRIMARY KEY (frequency_id)
);

CREATE TABLE IF NOT EXISTS public.units
(
    unit_id character varying(20),
    unit_name character varying(100) NOT NULL,
    unit_comment character varying(500) DEFAULT 'No Comments',
    PRIMARY KEY (unit_id)
);

COMMENT ON TABLE public.units
    IS 'A quantity chosen as a standard in terms of which other quantities may be expressed';

CREATE TABLE IF NOT EXISTS public.series
(
    series_id character varying(40),
    series_name character varying(200) DEFAULT 'NA',
    dataset_id character varying(50) DEFAULT 'NA',
    series_frequency_id character varying(50) DEFAULT 'NA',
    series_unit_id character varying(20) DEFAULT 'NA',
    series_region_id character varying(20) DEFAULT 'NA',
    PRIMARY KEY (series_id)
);

COMMENT ON TABLE public.series
    IS 'attributes of a series that has data. Standard information such as frequency, dataset it belongs to, description (name) etc.';

CREATE TABLE IF NOT EXISTS public.series_values
(
    series_id character varying(50) NOT NULL,
    series_date date,
    series_values numeric
);

COMMENT ON TABLE public.series_values
    IS 'Entity that holds quantitative information of the series';

ALTER TABLE IF EXISTS public.states
    ADD FOREIGN KEY (country_id)
    REFERENCES public.countries (country_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.datasets
    ADD FOREIGN KEY (dataset_source_id)
    REFERENCES public.sources (source_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.datasets
    ADD FOREIGN KEY (dataset_state_id)
    REFERENCES public.states (state_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.datasets
    ADD FOREIGN KEY (dataset_frequency_id)
    REFERENCES public.frequencies (frequency_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.series
    ADD FOREIGN KEY (series_unit_id)
    REFERENCES public.units (unit_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.series
    ADD FOREIGN KEY (dataset_id)
    REFERENCES public.datasets (dataset_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.series_values
    ADD FOREIGN KEY (series_id)
    REFERENCES public.series (series_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;